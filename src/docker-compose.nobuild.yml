services:
  webapp:
    image: ghcr.io/macel94/cloudnativeblazorpong/blazorpong-web
    container_name: webapp
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - GameHubEndpoint=http://localhost:6351/gamehub # using external port because when i use it this endpoint is used client side and i'm outside the network
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_RESOURCE_ATTRIBUTES=service.name=webapp

    ports:
      - "6350:8080"
      - "6401:9090"
    depends_on:
      - signalr
      - collector

  signalr:
    image: ghcr.io/macel94/cloudnativeblazorpong/blazorpong-signalr
    container_name: signalr
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__AzureSql=Server=azuresql;Database=Blazorpong.DB.AzureSql;User=sa;Password=yourStrong(!)Password;TrustServerCertificate=True
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_RESOURCE_ATTRIBUTES=service.name=signalr
    ports:
      - "6351:8080"
      - "6402:9090"
    depends_on:
      azuresql-init:
        condition: service_completed_successfully
      redis:
        condition: service_started   # port-open is enough for Redis
      collector:
        condition: service_started

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"

  azuresql:
    image: "mcr.microsoft.com/mssql/server:2025-latest"
    container_name: azuresql
    hostname: azuresql
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Blazorpong.DB.AzureSql/bin/Debug:/backup:ro
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=yourStrong(!)Password
    ports:
      - "1433:1433"
    # healthcheck:
    #   test: /opt/mssql-tools/bin/sqlcmd -S localhost -C -U sa -P "$$MSSQL_SA_PASSWORD" -Q "USE [Blazorpong.DB.AzureSql] select 1 from dbo.Room" -b -o /dev/null
    #   interval: 15s          # poll every 15 s
    #   timeout: 5s            # fail fast if sqlcmd hangs
    #   start_period: 30s      # first 30 s are ignored
    #   retries: 38            # 30 s + 38 √ó 15 s = 600 s (exactly 10 min)
  azuresql-init:
    image: mcr.microsoft.com/mssql-tools           # ‚Üê official sqlcmd/bcp image :contentReference[oaicite:0]{index=0}
    user: root                                    # run as root so apt-get can write
    depends_on:
      - azuresql
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/src/Blazorpong.DB.AzureSql/bin/Debug/Blazorpong.DB.AzureSql.dacpac:/tmp/yourdb.dacpac:ro
    environment:
      - SA_PASSWORD=yourStrong(!)Password
    entrypoint: ["/bin/bash","-c",
      "
        echo 'üîß Initializing Azure SQL‚Ä¶'
        # 1) Wait for SQL Server to accept connections
        until sqlcmd -S azuresql -U sa -P \"$$SA_PASSWORD\" -Q \"SELECT 1\" &>/dev/null; do
          echo '‚è≥ Waiting for SQL Server‚Ä¶'; sleep 1;
        done

        # 2) Install sqlpackage
        apt-get update \
          && apt-get install -y curl apt-transport-https unzip libunwind8 \
          && curl -SL -o /tmp/sqlpackage.zip https://aka.ms/sqlpackage-linux \
          && unzip -q /tmp/sqlpackage.zip -d /opt/sqlpackage \
          && chmod +x /opt/sqlpackage/sqlpackage \
          && rm /tmp/sqlpackage.zip

        # 3) Import the DACPAC
        echo 'üì¶ Importing DACPAC‚Ä¶'
        /opt/sqlpackage/sqlpackage \
          /Action:Import \
          /SourceFile:/tmp/yourdb.dacpac \
          /TargetServerName:azuresql \
          /TargetDatabaseName:BlazorpongDB \
          /TargetUser:sa \
          /TargetPassword:\"$$SA_PASSWORD\"

        # exit success
      "
    ]
    restart: "no"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/prometheus.yaml:/etc/prometheus/prometheus.yaml

  collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: collector
    command: [ "--config=/etc/collector.yaml" ]
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/otel-collector-config.yaml:/etc/collector.yaml
    depends_on:
      - tempo
      - prometheus
      - loki

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/tempo.yaml:/etc/tempo.yaml
    # logging: *default-logging
    ports:
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    # logging: *default-logging
    ports:
      - "3000:3000"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/dashboards:/etc/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    depends_on:
      - tempo
      - loki
      - prometheus

  loki:
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki.yaml
    ports:
      - "3100:3100"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/loki.yaml:/etc/loki.yaml