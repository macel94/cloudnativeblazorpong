# x-logging: &default-logging
#   driver: loki
#   options:
#     loki-url: 'http://localhost:3100/api/prom/push'
#     loki-pipeline-stages: |
#       - multiline:
#           firstline: '^\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2}'
#           max_wait_time: 3s
#       - regex:
#           expression: '^(?P<time>\d{4}-\d{2}-\d{2} \d{1,2}:\d{2}:\d{2},d{3}) (?P<message>(?s:.*))$$'

# version: '3'

networks:
  blazorpong-network:
    driver: bridge

services:
  traefik:
    image: "traefik:v3.1"
    container_name: "traefik"
    command:
      #- "--log.level=DEBUG"
      - "--api.insecure=true"
      - "--providers.docker=true"
      - "--providers.docker.exposedbydefault=false"
      - "--entrypoints.web.address=:80"
    ports:
      - "80:80"
      - "8080:8080"
    volumes:
      - "/var/run/docker.sock:/var/run/docker.sock:ro"
    networks:
      - blazorpong-network
    depends_on:
      - webapp
      - signalr
      - grafana

  webapp:
    image: ${DOCKER_REGISTRY-}blazorpong-web
    container_name: webapp
    build:
      context: .
      dockerfile: BlazorPong.Web/Server/Dockerfile
    networks:
      - blazorpong-network
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - GameHubEndpoint=http://localhost:6351/gamehub
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_RESOURCE_ATTRIBUTES=service.name=webapp

    ports:
      - "6350:8080"
      - "6401:9090"
    depends_on:
      - signalr
      - collector

  signalr:
    image: ${DOCKER_REGISTRY-}blazorpong-signalr
    container_name: signalr
    networks:
      - blazorpong-network
    build:
      context: .
      dockerfile: BlazorPong.SignalR/Dockerfile
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__AzureSql=Server=azuresql;Database=Blazorpong.DB.AzureSql;User=sa;Password=yourStrong(!)Password;TrustServerCertificate=True
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_RESOURCE_ATTRIBUTES=service.name=signalr
    ports:
      - "6351:8080"
      - "6402:9090"
    depends_on:
      azuresql:
        condition: service_healthy   # don’t start until SQL is healthy
      redis:
        condition: service_started   # port-open is enough for Redis
      collector:
        condition: service_started

  redis:
    networks:
      - blazorpong-network
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"

  # not usable until .net 9 comes out with the fix that lets garnet be useful even without lua scripting: https://github.com/microsoft/garnet/issues/85
  # redis:
  #   image: "ghcr.io/microsoft/garnet:latest"
  #   container_name: redis
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - garnetdata:/data
  # volumes:
  #   garnetdata:

  azuresql:
    image: mcr.microsoft.com/azure-sql-edge
    container_name: azuresql
    environment:
      ACCEPT_EULA: Y
      MSSQL_SA_PASSWORD: yourStrong(!)Password
      MSSQL_PID: Developer
      MSSQL_PACKAGE: /backup/Blazorpong.DB.AzureSql.dacpac
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Blazorpong.DB.AzureSql/bin/Debug:/backup:ro
    ports:
      - "1433:1433"
    healthcheck:
      # sqlcmd moved to the 18.x tools path in recent images – adjust if your tag is older
      test: ["CMD-SHELL",
        "/opt/mssql-tools18/bin/sqlcmd -C -S localhost -U sa -P $$MSSQL_SA_PASSWORD -Q 'SELECT 1' -b -o /dev/null"]
      interval: 15s          # poll every 15 s
      timeout: 5s            # fail fast if sqlcmd hangs
      start_period: 30s      # first 30 s are ignored
      retries: 38            # 30 s + 38 × 15 s = 600 s (exactly 10 min)

  prometheus:
    networks:
      - blazorpong-network
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/prometheus.yaml:/etc/prometheus/prometheus.yaml

  collector:
    networks:
      - blazorpong-network
    image: otel/opentelemetry-collector-contrib:latest
    container_name: collector
    command: [ "--config=/etc/collector.yaml" ]
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/otel-collector-config.yaml:/etc/collector.yaml
    depends_on:
      - tempo
      - prometheus
      - loki

  tempo:
    networks:
      - blazorpong-network
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/tempo.yaml:/etc/tempo.yaml
    # logging: *default-logging
    ports:
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http

  grafana:
    networks:
      - blazorpong-network
    image: grafana/grafana:latest
    container_name: grafana
    # logging: *default-logging
    ports:
      - "3000:3000"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/grafana-datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/dashboards.yaml:/etc/grafana/provisioning/dashboards/dashboards.yaml
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/dashboards:/etc/grafana/dashboards
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    depends_on:
      - tempo
      - loki
      - prometheus
    labels:
      - "traefik.enable=true"
      - "traefik.http.routers.grafana.rule=Host(`localhost`) && PathPrefix(`/grafana`)"
      - "traefik.http.middlewares.grafana-stripprefix.stripprefix.prefixes=/grafana"
      - "traefik.http.routers.grafana.middlewares=grafana-stripprefix"

  loki:
    networks:
      - blazorpong-network
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki.yaml
    ports:
      - "3100:3100"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER}/src/Observability/loki.yaml:/etc/loki.yaml