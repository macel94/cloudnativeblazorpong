services:
  webapp:
    image: ghcr.io/macel94/cloudnativeblazorpong/blazorpong-web:latest
    container_name: webapp
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ASPNETCORE_FORWARDEDHEADERS_ENABLED=true
      - GameHubEndpoint=http://signalr:8080/gamehub # internal port because playwright reaches it while being inside the network
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_RESOURCE_ATTRIBUTES=service.name=webapp

    ports:
      - "6350:8080"
      - "6401:9090"
    depends_on:
      - signalr
      - collector
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8080/"]
      interval: 30s          # poll every 30 s
      timeout: 10s           # fail fast if curl hangs
      start_period: 10s
      retries: 3             

  signalr:
    image: ghcr.io/macel94/cloudnativeblazorpong/blazorpong-signalr:latest
    container_name: signalr
    environment:
      - ASPNETCORE_ENVIRONMENT=Development
      - ConnectionStrings__Redis=redis:6379
      - ConnectionStrings__AzureSql=Server=azuresql;Database=BlazorpongDB;User=sa;Password=yourStrong(!)Password;TrustServerCertificate=True;Encrypt=False;
      - OTEL_EXPORTER_OTLP_ENDPOINT=http://collector:4317
      - OTEL_EXPORTER_OTLP_PROTOCOL=grpc
      - OTEL_RESOURCE_ATTRIBUTES=service.name=signalr
    ports:
      - "6351:8080"
      - "6402:9090"
    depends_on:
      initcontainer:
        condition: service_completed_successfully
      redis:
        condition: service_started   # port-open is enough for Redis
      collector:
        condition: service_started

  redis:
    image: "redis:latest"
    container_name: redis
    ports:
      - "6379:6379"

  azuresql:
    image: "mcr.microsoft.com/mssql/server:2025-latest"
    container_name: azuresql
    hostname: azuresql
    environment:
      - ACCEPT_EULA=Y
      - MSSQL_SA_PASSWORD=yourStrong(!)Password
    ports:
      - "1433:1433"
    healthcheck:
      test: /opt/mssql-tools/bin/sqlcmd -S localhost -C -U sa -P "$$MSSQL_SA_PASSWORD" -Q "select 1"
      interval: 3s
      timeout: 1s
      retries: 10

  initcontainer:
    image: mcr.microsoft.com/mssql-tools # ‚Üê official sqlcmd/bcp image :contentReference[oaicite:0]{index=0}
    user: root # run as root so apt-get can write
    depends_on:
      - azuresql
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER:-.}/src/Blazorpong.DB.AzureSql/bin/Debug/Blazorpong.DB.AzureSql.dacpac:/tmp/yourdb.dacpac:ro
      - ${LOCAL_WORKSPACE_FOLDER:-.}/src/scripts/initcontainer.sh:/usr/local/bin/initcontainer.sh:ro
    environment:
      - SA_PASSWORD=yourStrong(!)Password
    entrypoint: ["/usr/local/bin/initcontainer.sh"]
    restart: "no"

  prometheus:
    image: prom/prometheus:latest
    container_name: prometheus
    ports:
      - "9090"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER-.}/src/Observability/prometheus.yaml:/etc/prometheus/prometheus.yaml

  collector:
    image: otel/opentelemetry-collector-contrib:latest
    container_name: collector
    command: [ "--config=/etc/collector.yaml" ]
    ports:
      - "4317:4317"
      - "4318:4318"
      - "8889"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER-.}/src/Observability/otel-collector-config.yaml:/etc/collector.yaml
    depends_on:
      - tempo
      - prometheus
      - loki

  tempo:
    image: grafana/tempo:latest
    container_name: tempo
    command: [ "-config.file=/etc/tempo.yaml" ]
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER-.}/src/Observability/tempo.yaml:/etc/tempo.yaml
    ports:
      - "3200"   # tempo
      - "4317"  # otlp grpc
      - "4318"  # otlp http

  grafana:
    image: grafana/grafana:latest
    container_name: grafana
    ports:
      - "3000:3000"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER-.}/src/Observability/grafana/provisioning/datasources/datasources.yaml:/etc/grafana/provisioning/datasources/datasources.yaml
    environment:
      - GF_AUTH_ANONYMOUS_ENABLED=true
      - GF_AUTH_ANONYMOUS_ORG_ROLE=Admin
      - GF_AUTH_DISABLE_LOGIN_FORM=true
      - GF_FEATURE_TOGGLES_ENABLE=traceqlEditor
    depends_on:
      - tempo
      - loki
      - prometheus

  loki:
    image: grafana/loki:latest
    container_name: loki
    command: -config.file=/etc/loki.yaml
    ports:
      - "3100:3100"
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER-.}/src/Observability/loki.yaml:/etc/loki.yaml

  playwright:
    image: mcr.microsoft.com/playwright:v1.52.0-noble
    container_name: playwright
    working_dir: /tests
    volumes:
      - ${LOCAL_WORKSPACE_FOLDER-.}/src/tests-e2e:/tests
    environment:
      - BASE_URL=http://webapp:8080
      - CI=true
    depends_on:
      webapp:
        condition: service_healthy
    command: ["sh", "-c", "npm install && npx playwright install --with-deps && npx playwright install chrome && npx playwright test"]