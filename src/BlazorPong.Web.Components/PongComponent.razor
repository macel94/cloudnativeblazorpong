@using BlazorPong.Web.Shared
@using BlazorPong.Web.Shared.Clock
@using BlazorPong.Web.Shared.Hubs
@using Microsoft.AspNetCore.Http.Connections
@using Microsoft.AspNetCore.SignalR.Client
@using Microsoft.Extensions.Logging
@using Microsoft.JSInterop
@using System.Text
@implements IAsyncDisposable
@implements IBlazorPongClient

<FluentGrid>
    <FluentGridItem xs="9">
        <h3>Current User: @username</h3>
        @if (PlayerTypeMessage != null)
        {
            <h4 id="message" class="makeGolden" style="height:10%">@PlayerTypeMessage</h4>
        }

        @* Connection is the first thing as it's needed for anything else *@
        @if (NoConnectionOrInvalid)
        {
            <h5 class="makeGolden" style="height:10%">@ConnectionMessage</h5>
            <FluentSelect Label="Select a Connection Type"
                          Id="connection-listbox"
                          Style="height:10%"
                          Items="@(Enum.GetValues<HttpTransportType>().Where(x => x != HttpTransportType.None))"
                          @bind-SelectedOption="@connectionTypeChoice" />

            <FluentButton @onclick="ConnectToHub"> Connect</FluentButton>
        }
        else
        {
            @* Then we need a room and a role for that room *@
            @if (_playerType.HasValue)
            {
                @if (GameMessage != null)
                {
                    <h4 class="col makeGolden" style="height:5%">@GameMessage</h4>
                }
                @if (_playerType != Roles.Spectator && GameMessage == null)
                {
                    <FluentButton @onclick="SetPlayerIsReady" style="height:5%">Play</FluentButton>
                }
                <div class="col makeRed" style="height:5%">Player 1: @Player1Points</div>
                <div class="col makeGreen" style="height:5%">Player 2: @Player2Points</div>
            }
            else
            {
                <div>
                    <input type="text" @bind="tempRoomId" placeholder="Enter Room ID" />
                    <FluentButton @onclick="JoinRoom">Join Room</FluentButton>
                </div>
                <FluentButton @onclick="GenerateRoomId">Generate Room ID</FluentButton>
            }
        }
    </FluentGridItem>

    <FluentGridItem xs="3">
        <h3>Rendering DateTime Stack</h3>

        @if (dateTimeArray.Any(d => d != default))
        {
            <ul>
                @for (int i = 0; i < dateTimeArray.Length; i++)
                {
                    var index = (currentIndex + i) % dateTimeArray.Length;
                    if (dateTimeArray[index] != default)
                    {
                        <li @key="index">@dateTimeArray[index].ToString("yyyy-MM-dd HH:mm:ss.fff")</li>
                    }
                }
            </ul>
        }

        <h3>Updates Per Second: @UpdatesPerSecond</h3>
    </FluentGridItem>
</FluentGrid>

<div id="gamearea">
    @if (GameObjectsInitialized)
    {
        <div id="@(GameConstants.BallRoleAsString.ToLower())" style="@(Ball.ToStyle())" />
        <div id="@(GameConstants.Player1RoleAsString.ToLower())" draggable=@(Player1.Draggable)
             @ondragstart="@(e => SetInitialMouseOffset(e, Player1))"
             @ondrag="@(e => MoveOnYAxisAndFlag(e, Player1))"
             style="@Player1.ToStyle()" />
        <div id="@(GameConstants.Player2RoleAsString.ToLower())" draggable=@(Player2.Draggable)
             @ondragstart="@(e => SetInitialMouseOffset(e, Player2))"
             @ondrag="@(e => MoveOnYAxisAndFlag(e, Player2))"
             style="@Player2.ToStyle()" />
    }
</div>

@code {
    // Get Ilogger
    [Inject]
    public ILogger<PongComponent> Logger { get; set; } = default!;
    [Parameter, EditorRequired]
    public Guid? RoomId { get; set; }
    [Parameter, EditorRequired]
    public string GameHubEndpoint { get; set; } = default!;
    [Inject]
    public NavigationManager NavigationManager { get; set; } = default!;
    [Inject]
    public IJSRuntime JsRuntime { get; set; } = default!;
    [Inject]
    public ISystemClock SystemClock { get; set; } = default!;
    private HubConnection? Connection;
    private string tempRoomId = string.Empty;
    private DateTimeOffset? LastTimedSecond;
    private int UpdatesPerSecond;
    // Generate random username for now, in the future will be chosen by the user
    private string username = $"user_{Guid.NewGuid()}";

    private Dictionary<string, GameObject?> GameObjectsDict = new();
    private StringBuilder sb = new StringBuilder();
    private GameObject? Ball
    {
        get => GameObjectsDict.GetValueOrDefault(GameConstants.BallRoleAsString, null);
        set => GameObjectsDict[GameConstants.BallRoleAsString] = value;
    }

    private GameObject? Player1
    {
        get => GameObjectsDict.GetValueOrDefault(GameConstants.Player1RoleAsString, null);
        set => GameObjectsDict[GameConstants.Player1RoleAsString] = value;
    }

    private GameObject? Player2
    {
        get => GameObjectsDict.GetValueOrDefault(GameConstants.Player2RoleAsString, null);
        set => GameObjectsDict[GameConstants.Player2RoleAsString] = value;
    }

    private bool GameObjectsInitialized => Ball != null && Player1 != null && Player2 != null;

    protected Dictionary<string, HttpTransportType> ConnectionTypesDictionary = new()
    {{nameof(HttpTransportType.WebSockets), HttpTransportType.WebSockets},
    {nameof(HttpTransportType.LongPolling), HttpTransportType.LongPolling},
    {nameof(HttpTransportType.ServerSentEvents), HttpTransportType.ServerSentEvents}};
    protected Roles? _playerType = null;
    private double _mouseOffset = 0;
    private double _containerTopOffset = 0;
    protected int Player1Points;
    protected int Player2Points;
    protected string? PlayerTypeMessage;
    protected string? GameMessage;
    protected string ConnectionMessage = "Please select a type of connection and click 'Connect'.";
    private Timer? _updateServerTimer;
    private HttpTransportType connectionTypeChoice = HttpTransportType.WebSockets;
    public IJSObjectReference? module { get; set; }
    private double _containerHeight = 0;
    private DateTimeOffset[] dateTimeArray = new DateTimeOffset[5];
    private int currentIndex = 0;
    private bool NoConnectionOrInvalid => Connection == null || (Connection.State != HubConnectionState.Connected && Connection.State != HubConnectionState.Reconnecting);

    public void SetInitialMouseOffset(DragEventArgs e, GameObject go)
    {
        Logger.LogInformation("Drag started for: " + go.Id);

        // Assuming go.Top is the current top position of the element in percentage
        var currentTopInPixels = (go.Top / 100) * _containerHeight;
        _mouseOffset = e.ClientY - _containerTopOffset - currentTopInPixels;
    }

    protected override async Task OnAfterRenderAsync(bool firstRender)
    {
        if (firstRender)
        {
            var assembly = System.Reflection.Assembly.GetExecutingAssembly();
            var assemblyName = assembly.GetName().Name;

            module = await JsRuntime.InvokeAsync<IJSObjectReference>(
            "import", $"./_content/{assemblyName}/{nameof(PongComponent)}.razor.js");
            _containerHeight = await module.InvokeAsync<double>("getContainerHeight");
            _containerTopOffset = await module.InvokeAsync<double>("getContainerTopOffset", "gamearea");
            if (RoomId.HasValue)
            {
                tempRoomId = RoomId.Value.ToString();
                await ConnectToHub();
                await JoinRoom();
                StateHasChanged();
            }
        }
        dateTimeArray[currentIndex] = SystemClock.UtcNow;
        currentIndex = (currentIndex + 1) % dateTimeArray.Length;
        if (LastTimedSecond == null)
        {
            LastTimedSecond = SystemClock.UtcNow;
        }
        else if (SystemClock.UtcNow - LastTimedSecond > TimeSpan.FromSeconds(1))
        {
            LastTimedSecond = SystemClock.UtcNow;
            UpdatesPerSecond = 0;
        }
        else
        {
            UpdatesPerSecond++;
        }

        await base.OnAfterRenderAsync(firstRender);
    }

    public async Task ConnectToHub()
    {
        try
        {
            await SetOnbeforeunload();
            var endpoint = GameHubEndpoint;
            Connection = new HubConnectionBuilder()
            .WithUrl(endpoint, connectionTypeChoice)
            .WithAutomaticReconnect()
            .Build();

            Connection.On<GameObject>(nameof(IBlazorPongClient.UpdateGameObjectPositionOnClient), UpdateGameObjectPositionOnClient);
            Connection.On<Roles, int>(nameof(IBlazorPongClient.UpdatePlayerPoints), UpdatePlayerPoints);
            Connection.On<string>(nameof(IBlazorPongClient.UpdateGameMessage), UpdateGameMessage);

            Logger.LogInformation("State: " + Connection.State.ToString() + "Type:" + connectionTypeChoice.ToString());

            await Connection.StartAsync();

            Logger.LogInformation("State: " + Connection.State.ToString() + "Type:" + connectionTypeChoice.ToString());

            Logger.LogInformation("ConnectionId: " + Connection.ConnectionId?.ToString());
        }
        catch (Exception ex)
        {
            Logger.LogInformation(ex.ToString());
        }
    }

    public async Task UpdateGameMessage(string serverMessage)
    {
        GameMessage = serverMessage;
        await InvokeAsync(StateHasChanged);

        // Lascio che l'utente veda il messaggio finale
        await Task.Delay(GameConstants.DelayAfterResetInMs);

        // Lo resetto a null per mostrare il pulsante play
        GameMessage = null;

        // Resetto i player points
        Player1Points = 0;
        Player2Points = 0;

        await InvokeAsync(StateHasChanged);
    }

    public Task UpdatePlayerPoints(Roles clientType, int points)
    {
        switch (clientType)
        {
            case Roles.Player1:
                Player1Points = points;
                GameMessage = "Player1 just made a point!";
                break;
            case Roles.Player2:
                Player2Points = points;
                GameMessage = "Player2 just made a point!";
                break;
        }

        return InvokeAsync(StateHasChanged);
    }

    public void MoveOnYAxisAndFlag(DragEventArgs e, GameObject go)
    {
        if (!go.Draggable || e.ClientY <= 0)
        {
            return;
        }

        // Calculate the Y position relative to the top of the container
        var relativeY = e.ClientY - _containerTopOffset;

        // Adjust the position with the initial mouse offset
        var nextTop = (relativeY - _mouseOffset) / _containerHeight * 100;

        // Limit the position between 0 and 100, accounting for the object's height
        double maxTop = 100 - (go.Height / _containerHeight) * 100;
        nextTop = Math.Max(0, Math.Min(nextTop, maxTop));

        // Logging all the variables for debug purposes
        sb.Clear();
        sb.AppendLine($"Dragging: {go.Id}")
        .AppendLine($"ClientY: {e.ClientY}")
        .AppendLine($"ContainerTopOffset: {_containerTopOffset}")
        .AppendLine($"RelativeY: {relativeY}")
        .AppendLine($"MouseOffset: {_mouseOffset}")
        .AppendLine($"ContainerHeight: {_containerHeight}")
        .AppendLine($"NextTop: {nextTop}")
        .AppendLine($"MaxTop: {maxTop}");
        Logger.LogDebug(sb.ToString());

        GameObjectsDict[go.Id]!.Top = nextTop;
        GameObjectsDict[go.Id]!.LastUpdate = SystemClock.UtcNow.ToUnixTimeMilliseconds();

        StateHasChanged();
    }

    // TODO - https://github.com/microsoft/dotnet-podcasts/blob/main/src/Web/Components/ListenTogetherHubClient.cs#L5
    private async void UpdateServer(object? state)
    {
        try
        {
            await UpdateChangedGameObjectsPositionsOnServer();
        }
        catch (Exception ex)
        {
            Logger.LogInformation(ex.ToString());
        }
    }

    private async Task UpdateChangedGameObjectsPositionsOnServer()
    {
        if (_playerType == Roles.Spectator)
        {
            return;
        }

        foreach (var kvpair in GameObjectsDict)
        {
            var go = kvpair.Value!;
            if (go.WasUpdated)
            {
                await Connection!.SendAsync(nameof(IGameHub.UpdateGameObjectPosition), RoomId, go);
                GameObjectsDict[go.Id] = go with
                    {
                        LastTickClientKnowsServerReceivedUpdate = SystemClock.UtcNow.ToUnixTimeMilliseconds()
                    };
            }
        }
    }

    private async Task GetOrInitializeGameObjects()
    {
        // Chiedo al server la posizione di ogni oggetto e aspetto la risposta
        GameObjectsDict = await Connection!.InvokeAsync<Dictionary<string, GameObject?>>(nameof(IGameHub.GetGameObjects), RoomId);

        // Infine setto i draggable che non dipendono dal server
        foreach (var kvpair in GameObjectsDict)
        {
            kvpair.Value!.Draggable = kvpair.Key.Equals(_playerType.ToString());
        }
    }

    public Task UpdateGameObjectPositionOnClient(GameObject? updatedObj)
    {
        if (GameMessage != null && GameMessage != "Game started!")
        {
            GameMessage = "Game started!";
        }

        if (GameObjectsDict.TryGetValue(updatedObj!.Id, out var foundObj))
        {
            foundObj!.Top = updatedObj.Top;
            foundObj.Left = updatedObj.Left;
        }

        // If possible, understand how to remove every StateHasChanged()
        return InvokeAsync(StateHasChanged);
    }

    public async ValueTask DisposeAsync()
    {
        // Dispose del timer
        _updateServerTimer?.Dispose();

        // Chiusura della connessione manualmente perchè l'evento non viene chiamato dal framework
        if (Connection != null)
        {
            await Connection.StopAsync();
        }

        try
        {
            await UnsetOnbeforeunload();
            module?.DisposeAsync();
        }
        catch
        {
            //Catch silente, perchè se l'utente si disconnette e non cambia semplicemente tab, l'evento non esiste già più.
        }
    }

    private Task SetOnbeforeunload()
    {
        return module!.InvokeAsync<object>("setOnbeforeunload", DotNetObjectReference.Create(this)).AsTask();
    }

    private Task UnsetOnbeforeunload()
    {
        return module!.InvokeAsync<object>("unsetOnbeforeunload", DotNetObjectReference.Create(this)).AsTask();
    }

    // DO NOT DELETE - This is called on dispose by js
    [JSInvokable]
    public Task DisposePongComponent()
    {
        return DisposeAsync().AsTask();
    }

    public async Task SetPlayerIsReady()
    {
        await Connection!.SendAsync(nameof(IGameHub.SetPlayerIsReady), RoomId);
        // TODO - Refactor the GameMessage so that it's always the server who sends them and client only receive and visualize them, no logic should be here
        GameMessage = "Waiting for the other player...";
        await InvokeAsync(StateHasChanged);
    }

    private async Task GenerateRoomId()
    {
        RoomId = Guid.NewGuid();
        NavigationManager.NavigateTo($"/room/{RoomId}/pong");
        // Get what type of player the current user will be
        try
        {
            _playerType = await Connection!.InvokeAsync<Roles>(nameof(IGameHub.OpenRoom), RoomId, username);
            await ManageEnteredPlayerTypeAssigned();
        }
        catch (Exception ex)
        {
            Logger.LogInformation(ex.ToString());
        }
    }

    private async Task JoinRoom()
    {
        if (Guid.TryParse(tempRoomId, out var roomId))
        {
            RoomId = roomId;
            NavigationManager.NavigateTo($"/room/{RoomId}/pong");
            // Get what type of player the current user will be
            _playerType = await Connection!.InvokeAsync<Roles>(nameof(IGameHub.JoinRoom), RoomId, username);
            await ManageEnteredPlayerTypeAssigned();
        }
        else
        {
            // TODO - Handle invalid GUID format
            // e.g., show an error message
        }
    }

    private async Task ManageEnteredPlayerTypeAssigned()
    {
        Logger.LogInformation("Player type:" + _playerType.ToString());

        PlayerTypeMessage = $"Your role is: {_playerType.ToString()}";

        await GetOrInitializeGameObjects();

        Logger.LogInformation("GameObjects initialization completed.");

        // Ogni decimo di secondo controlliamo se necessario fare l'update delle collisioni al server e in caso lo mandiamo
        // Iniziamo un secondo dopo l'inizializzazione del timer
        _updateServerTimer = new Timer(UpdateServer, null, 1000, 10);

        Logger.LogInformation("Timer Started!");
    }
}
